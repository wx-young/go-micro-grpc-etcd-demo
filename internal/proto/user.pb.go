// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.9.0
// source: protobuf/user.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UserInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*UserInfo `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *UserInfoResponse) Reset() {
	*x = UserInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoResponse) ProtoMessage() {}

func (x *UserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoResponse.ProtoReflect.Descriptor instead.
func (*UserInfoResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_user_proto_rawDescGZIP(), []int{0}
}

func (x *UserInfoResponse) GetUsers() []*UserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

type UserInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*UserInfo `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *UserInfoRequest) Reset() {
	*x = UserInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoRequest) ProtoMessage() {}

func (x *UserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoRequest.ProtoReflect.Descriptor instead.
func (*UserInfoRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_user_proto_rawDescGZIP(), []int{1}
}

func (x *UserInfoRequest) GetUsers() []*UserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

var File_protobuf_user_proto protoreflect.FileDescriptor

var file_protobuf_user_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x15, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x39,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x32, 0xb6, 0x02, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x47, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x54, 0x57, 0x53, 0x12, 0x15, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x10, 0x5a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_user_proto_rawDescOnce sync.Once
	file_protobuf_user_proto_rawDescData = file_protobuf_user_proto_rawDesc
)

func file_protobuf_user_proto_rawDescGZIP() []byte {
	file_protobuf_user_proto_rawDescOnce.Do(func() {
		file_protobuf_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_user_proto_rawDescData)
	})
	return file_protobuf_user_proto_rawDescData
}

var file_protobuf_user_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_protobuf_user_proto_goTypes = []interface{}{
	(*UserInfoResponse)(nil), // 0: user.UserInfoResponse
	(*UserInfoRequest)(nil),  // 1: user.UserInfoRequest
	(*UserInfo)(nil),         // 2: models.UserInfo
}
var file_protobuf_user_proto_depIdxs = []int32{
	2, // 0: user.UserInfoResponse.users:type_name -> models.UserInfo
	2, // 1: user.UserInfoRequest.users:type_name -> models.UserInfo
	1, // 2: user.UserService.GetUserInfo:input_type -> user.UserInfoRequest
	1, // 3: user.UserService.GetUserInfoByServerStream:input_type -> user.UserInfoRequest
	1, // 4: user.UserService.GetUserInfoByClientStream:input_type -> user.UserInfoRequest
	1, // 5: user.UserService.GetUserInfoByTWS:input_type -> user.UserInfoRequest
	0, // 6: user.UserService.GetUserInfo:output_type -> user.UserInfoResponse
	0, // 7: user.UserService.GetUserInfoByServerStream:output_type -> user.UserInfoResponse
	0, // 8: user.UserService.GetUserInfoByClientStream:output_type -> user.UserInfoResponse
	0, // 9: user.UserService.GetUserInfoByTWS:output_type -> user.UserInfoResponse
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_protobuf_user_proto_init() }
func file_protobuf_user_proto_init() {
	if File_protobuf_user_proto != nil {
		return
	}
	file_protobuf_models_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_protobuf_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protobuf_user_proto_goTypes,
		DependencyIndexes: file_protobuf_user_proto_depIdxs,
		MessageInfos:      file_protobuf_user_proto_msgTypes,
	}.Build()
	File_protobuf_user_proto = out.File
	file_protobuf_user_proto_rawDesc = nil
	file_protobuf_user_proto_goTypes = nil
	file_protobuf_user_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	// 普通请求
	GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	// 服务器流接受
	GetUserInfoByServerStream(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (UserService_GetUserInfoByServerStreamClient, error)
	// 客户端流
	GetUserInfoByClientStream(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserInfoByClientStreamClient, error)
	// 客户端服务器流
	GetUserInfoByTWS(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserInfoByTWSClient, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, "/user.UserService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfoByServerStream(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (UserService_GetUserInfoByServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[0], "/user.UserService/GetUserInfoByServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetUserInfoByServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetUserInfoByServerStreamClient interface {
	Recv() (*UserInfoResponse, error)
	grpc.ClientStream
}

type userServiceGetUserInfoByServerStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceGetUserInfoByServerStreamClient) Recv() (*UserInfoResponse, error) {
	m := new(UserInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) GetUserInfoByClientStream(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserInfoByClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[1], "/user.UserService/GetUserInfoByClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetUserInfoByClientStreamClient{stream}
	return x, nil
}

type UserService_GetUserInfoByClientStreamClient interface {
	Send(*UserInfoRequest) error
	CloseAndRecv() (*UserInfoResponse, error)
	grpc.ClientStream
}

type userServiceGetUserInfoByClientStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceGetUserInfoByClientStreamClient) Send(m *UserInfoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceGetUserInfoByClientStreamClient) CloseAndRecv() (*UserInfoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UserInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) GetUserInfoByTWS(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserInfoByTWSClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[2], "/user.UserService/GetUserInfoByTWS", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetUserInfoByTWSClient{stream}
	return x, nil
}

type UserService_GetUserInfoByTWSClient interface {
	Send(*UserInfoRequest) error
	Recv() (*UserInfoResponse, error)
	grpc.ClientStream
}

type userServiceGetUserInfoByTWSClient struct {
	grpc.ClientStream
}

func (x *userServiceGetUserInfoByTWSClient) Send(m *UserInfoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceGetUserInfoByTWSClient) Recv() (*UserInfoResponse, error) {
	m := new(UserInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	// 普通请求
	GetUserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	// 服务器流接受
	GetUserInfoByServerStream(*UserInfoRequest, UserService_GetUserInfoByServerStreamServer) error
	// 客户端流
	GetUserInfoByClientStream(UserService_GetUserInfoByClientStreamServer) error
	// 客户端服务器流
	GetUserInfoByTWS(UserService_GetUserInfoByTWSServer) error
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) GetUserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (*UnimplementedUserServiceServer) GetUserInfoByServerStream(*UserInfoRequest, UserService_GetUserInfoByServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserInfoByServerStream not implemented")
}
func (*UnimplementedUserServiceServer) GetUserInfoByClientStream(UserService_GetUserInfoByClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserInfoByClientStream not implemented")
}
func (*UnimplementedUserServiceServer) GetUserInfoByTWS(UserService_GetUserInfoByTWSServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserInfoByTWS not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInfoByServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).GetUserInfoByServerStream(m, &userServiceGetUserInfoByServerStreamServer{stream})
}

type UserService_GetUserInfoByServerStreamServer interface {
	Send(*UserInfoResponse) error
	grpc.ServerStream
}

type userServiceGetUserInfoByServerStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceGetUserInfoByServerStreamServer) Send(m *UserInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_GetUserInfoByClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).GetUserInfoByClientStream(&userServiceGetUserInfoByClientStreamServer{stream})
}

type UserService_GetUserInfoByClientStreamServer interface {
	SendAndClose(*UserInfoResponse) error
	Recv() (*UserInfoRequest, error)
	grpc.ServerStream
}

type userServiceGetUserInfoByClientStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceGetUserInfoByClientStreamServer) SendAndClose(m *UserInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceGetUserInfoByClientStreamServer) Recv() (*UserInfoRequest, error) {
	m := new(UserInfoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_GetUserInfoByTWS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).GetUserInfoByTWS(&userServiceGetUserInfoByTWSServer{stream})
}

type UserService_GetUserInfoByTWSServer interface {
	Send(*UserInfoResponse) error
	Recv() (*UserInfoRequest, error)
	grpc.ServerStream
}

type userServiceGetUserInfoByTWSServer struct {
	grpc.ServerStream
}

func (x *userServiceGetUserInfoByTWSServer) Send(m *UserInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceGetUserInfoByTWSServer) Recv() (*UserInfoRequest, error) {
	m := new(UserInfoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _UserService_GetUserInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserInfoByServerStream",
			Handler:       _UserService_GetUserInfoByServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserInfoByClientStream",
			Handler:       _UserService_GetUserInfoByClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUserInfoByTWS",
			Handler:       _UserService_GetUserInfoByTWS_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf/user.proto",
}
